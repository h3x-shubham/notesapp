// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  notes   Notes? // [User] one-to-one [Cart]
  // orders Order[]
  // followers User[] @relation(name:"Followers")
  // follows User[] @relation(name:"Followers")
}

// model Product {
//   id          String    @id @default(uuid()) @map("_id")
//   fakeid      String
//   title       String    @unique
//   description String
//   price       String
//   quantity    Int
//   image       String
//   createdAt   DateTime  @default(now())
//   category    Category? @relation(fields: [categoryId], references: [id])
//   categoryId  String?
// }

// model Category {
//   id        String    @id @default(uuid()) @map("_id")
//   name      String    @unique
//   createdAt DateTime  @default(now())
//   products  Product[]
// }

model Notes {
  id        String   @id @default(cuid()) @map("_id") 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  NoteItems Note[] // [Cart] one-to-many [CartItem]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Note {
  id           String @id @default(cuid()) @map("_id") 
  // fakeid       Int
  title        String
  content       String
  pinned        Boolean @default(false)
  // price        Float
  // description  String
  // category     String
  // image        String
  // rating Json
 
  // quantity     Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // productId String @db.ObjectId

  NotesId String 
  Note   Notes   @relation(fields: [NotesId], references: [id], onDelete: Cascade)

  @@map("note")
}

// model Order {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   status     Status
//   totalPrice Float

//   orderItems OrderItem[] // [Order] one-to-many [OrderItem]

//   userId String
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("orders")
// }

enum Status {
  PENDING
  CANCELED
  COMPLETED
}

// model OrderItem {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   productId String @db.ObjectId
//   quantity  Int

//   orderId String @db.ObjectId
//   order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

//   @@map("order_items")
// }
